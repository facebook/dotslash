"use strict";(self.webpackChunkdotslash_website=self.webpackChunkdotslash_website||[]).push([[217],{3905:(e,n,a)=>{a.r(n),a.d(n,{MDXContext:()=>d,MDXProvider:()=>u,mdx:()=>g,useMDXComponents:()=>p,withMDXComponents:()=>m});var t=a(67294);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(){return o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e},o.apply(this,arguments)}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){l(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,l=function(e,n){if(null==e)return{};var a,t,l={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var d=t.createContext({}),m=function(e){return function(n){var a=p(n.components);return t.createElement(e,o({},n,{components:a}))}},p=function(e){var n=t.useContext(d),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},u=function(e){var n=p(e.components);return t.createElement(d.Provider,{value:n},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},x=t.forwardRef((function(e,n){var a=e.components,l=e.mdxType,o=e.originalType,r=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=p(a),u=l,c=m["".concat(r,".").concat(u)]||m[u]||h[u]||o;return a?t.createElement(c,s(s({ref:n},d),{},{components:a})):t.createElement(c,s({ref:n},d))}));function g(e,n){var a=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=a.length,r=new Array(o);r[0]=x;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[c]="string"==typeof e?e:l,r[1]=s;for(var d=2;d<o;d++)r[d]=a[d];return t.createElement.apply(null,r)}return t.createElement.apply(null,a)}x.displayName="MDXCreateElement"},89803:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var t=a(87462),l=(a(67294),a(3905));const o={sidebar_position:8},r="Installing DotSlash",s={unversionedId:"installation",id:"installation",title:"Installing DotSlash",description:"We provide a number of ways to install DotSlash.",source:"@site/docs/installation.md",sourceDirName:".",slug:"/installation",permalink:"/docs/installation",draft:!1,editUrl:"https://github.com/facebook/dotslash/tree/main/website/docs/installation.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Motivation",permalink:"/docs/motivation"},next:{title:"DotSlash File Schema",permalink:"/docs/dotslash-file"}},i={},d=[{value:"Prebuilt Binaries",id:"prebuilt-binaries",level:2},{value:"Linux",id:"linux",level:3},{value:"macOS",id:"macos",level:3},{value:"Windows",id:"windows",level:3},{value:"GitHub Actions",id:"github-actions",level:2},{value:"cargo install",id:"cargo-install",level:2},{value:"Build from source",id:"build-from-source",level:2},{value:"macOS",id:"macos-1",level:3},{value:"musl",id:"musl",level:3},{value:"GitHub CLI",id:"github-cli",level:2}],m={toc:d},p="wrapper";function u(e){let{components:n,...a}=e;return(0,l.mdx)(p,(0,t.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)("h1",{id:"installing-dotslash"},"Installing DotSlash"),(0,l.mdx)("p",null,"We provide a number of ways to install DotSlash."),(0,l.mdx)("admonition",{type:"note"},(0,l.mdx)("p",{parentName:"admonition"},"On macOS, we ",(0,l.mdx)("strong",{parentName:"p"},"strongly")," recommend running DotSlash as a\n",(0,l.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/apple-silicon/building-a-universal-macos-binary"},"Universal Binary"),"\nrather than an x86 or ARM64 binary. If an x86 binary is running under\n",(0,l.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/apple-silicon/about-the-rosetta-translation-environment"},"Rosetta"),"\non Apple Silicon and ends up spawning ",(0,l.mdx)("inlineCode",{parentName:"p"},"dotslash"),", then for consistency with the\nparent process, this will ensure that the ",(0,l.mdx)("inlineCode",{parentName:"p"},"macos-x86_64")," artifact will be run.")),(0,l.mdx)("h2",{id:"prebuilt-binaries"},"Prebuilt Binaries"),(0,l.mdx)("p",null,"We provide prebuilt binaries for macOS, ","[Ubuntu]"," Linux, and Windows on GitHub:"),(0,l.mdx)("p",null,(0,l.mdx)("a",{parentName:"p",href:"https://github.com/facebook/dotslash/releases/latest"},"https://github.com/facebook/dotslash/releases/latest")),(0,l.mdx)("p",null,"Once you have downloaded DotSlash, you must ensure that ",(0,l.mdx)("inlineCode",{parentName:"p"},"dotslash")," (or\n",(0,l.mdx)("inlineCode",{parentName:"p"},"dotslash.exe")," on Windows) is on your ",(0,l.mdx)("inlineCode",{parentName:"p"},"PATH"),". You can test that it is setup\ncorrectly on Mac or Linux by running:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-shell"},"/usr/bin/env dotslash --help\n")),(0,l.mdx)("h3",{id:"linux"},"Linux"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-shell"},'curl -LSfs "https://github.com/facebook/dotslash/releases/latest/download/dotslash-ubuntu-22.04.$(uname -m).tar.gz" | tar fxz - -C YOUR_BIN_PATH\n')),(0,l.mdx)("h3",{id:"macos"},"macOS"),(0,l.mdx)("p",null,"For the reasons explained above, the macOS release is a Universal Binary."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-shell"},"curl -LSfs https://github.com/facebook/dotslash/releases/latest/download/dotslash-macos.tar.gz | tar fxz - -C YOUR_BIN_PATH\n")),(0,l.mdx)("admonition",{type:"warning"},(0,l.mdx)("p",{parentName:"admonition"},"Downloading the ",(0,l.mdx)("inlineCode",{parentName:"p"},".tar.gz")," using a web browser instead of something like ",(0,l.mdx)("inlineCode",{parentName:"p"},"curl"),'\nwill cause macOS to tag DotSlash as "untrusted" and the security manager will\nprevent you from running it. You can remove this annotation as follows:'),(0,l.mdx)("pre",{parentName:"admonition"},(0,l.mdx)("code",{parentName:"pre",className:"language-shell"},"xattr -r -d com.apple.quarantine ~/Downloads/dotslash-macos.*.tar.gz\n"))),(0,l.mdx)("h3",{id:"windows"},"Windows"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-cmd"},"cmd /c 'curl.exe -LSfs https://github.com/facebook/dotslash/releases/latest/download/dotslash-windows.tar.gz | tar fxz - -C YOUR_BIN_PATH'\n")),(0,l.mdx)("h2",{id:"github-actions"},"GitHub Actions"),(0,l.mdx)("p",null,"We provide a GitHub Action to install dotslash for a workflow:"),(0,l.mdx)("p",null,(0,l.mdx)("a",{parentName:"p",href:"https://github.com/facebook/install-dotslash"},"https://github.com/facebook/install-dotslash")),(0,l.mdx)("p",null,"It can be used from GitHub Actions workflows like so:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre"},"name: test suite\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: facebook/install-dotslash@latest\n      - run: ./some_dotslash_file\n")),(0,l.mdx)("h2",{id:"cargo-install"},"cargo install"),(0,l.mdx)("p",null,"If you are familiar with the Rust toolchain, you can also build and install\nDotSlash using ",(0,l.mdx)("inlineCode",{parentName:"p"},"cargo"),":"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-shell"},"cargo install dotslash\n")),(0,l.mdx)("p",null,"Assuming you already have ",(0,l.mdx)("inlineCode",{parentName:"p"},".cargo/bin")," on your ",(0,l.mdx)("inlineCode",{parentName:"p"},"PATH"),", you should not have to\nupdate any environment variables to get DotSlash to work."),(0,l.mdx)("p",null,"Though note that ",(0,l.mdx)("inlineCode",{parentName:"p"},"cargo install")," does not create a universal binary, so you may\nbe better off ",(0,l.mdx)("a",{parentName:"p",href:"#build-from-source"},"building from source"),"."),(0,l.mdx)("h2",{id:"build-from-source"},"Build from source"),(0,l.mdx)("p",null,"The short version of the build process is:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-shell"},"git clone https://github.com/facebook/dotslash\ncd dotslash\ncargo build --release\n")),(0,l.mdx)("p",null,"Or with ",(0,l.mdx)("a",{parentName:"p",href:"https://sapling-scm.com/docs/introduction/"},"Sapling"),":"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-shell"},"sl clone https://github.com/facebook/dotslash\ncd dotslash\ncargo build --release\n")),(0,l.mdx)("p",null,"And then you can copy ",(0,l.mdx)("inlineCode",{parentName:"p"},"./target/release/dotslash")," (or ",(0,l.mdx)("inlineCode",{parentName:"p"},"dotslash.exe")," on Windows)\nto your ",(0,l.mdx)("inlineCode",{parentName:"p"},"PATH"),"."),(0,l.mdx)("h3",{id:"macos-1"},"macOS"),(0,l.mdx)("p",null,"Building a Universal Binary on macOS entails some extra steps:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-shell"},"git clone https://github.com/facebook/dotslash\ncd dotslash\ncargo build --release --target aarch64-apple-darwin\ncargo build --release --target x86_64-apple-darwin\nlipo -create -output dotslash target/aarch64-apple-darwin/release/dotslash target/x86_64-apple-darwin/release/dotslash\n")),(0,l.mdx)("p",null,"And then adding the ",(0,l.mdx)("inlineCode",{parentName:"p"},"dotslash")," file created by ",(0,l.mdx)("inlineCode",{parentName:"p"},"lipo")," to your ",(0,l.mdx)("inlineCode",{parentName:"p"},"PATH"),"."),(0,l.mdx)("h3",{id:"musl"},"musl"),(0,l.mdx)("p",null,"On Linux, consider building DotSlash from source using\n",(0,l.mdx)("a",{parentName:"p",href:"https://musl.libc.org/"},"musl")," for an even more lightweight version of the\n",(0,l.mdx)("inlineCode",{parentName:"p"},"dotslash")," executable:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-shell"},"$ git clone https://github.com/facebook/dotslash\n$ cd dotslash\n$ rustup target add x86_64-unknown-linux-musl\n$ cargo build --release --target=x86_64-unknown-linux-musl\n$ target/x86_64-unknown-linux-musl/release/dotslash --help\nusage: dotslash DOTSLASH_FILE [OPTIONS]\n...\n")),(0,l.mdx)("p",null,"Note that if ",(0,l.mdx)("inlineCode",{parentName:"p"},"cargo build")," fails with an error like\n",(0,l.mdx)("inlineCode",{parentName:"p"},"Failed to find tool. Is `musl-gcc` installed?"),", then you likely need to\ninstall the ",(0,l.mdx)("inlineCode",{parentName:"p"},"musl-gcc")," package, which ",(0,l.mdx)("inlineCode",{parentName:"p"},"rustup")," does not do for you."),(0,l.mdx)("p",null,"On Ubuntu/Debian, you can install it with:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-shell"},"sudo apt install musl-tools\n")),(0,l.mdx)("h2",{id:"github-cli"},"GitHub CLI"),(0,l.mdx)("p",null,"If you have the ",(0,l.mdx)("a",{parentName:"p",href:"https://cli.github.com/"},"GitHub CLI (",(0,l.mdx)("inlineCode",{parentName:"a"},"gh"),")")," installed, you can\nuse ",(0,l.mdx)("inlineCode",{parentName:"p"},"gh release download")," to fetch the ",(0,l.mdx)("inlineCode",{parentName:"p"},".tar.gz")," for a release instead of ",(0,l.mdx)("inlineCode",{parentName:"p"},"curl"),"\nby running a command of the form:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-shell"},"gh release download --repo facebook/dotslash TAG --pattern PATTERN\n")),(0,l.mdx)("p",null,"where ",(0,l.mdx)("inlineCode",{parentName:"p"},"TAG")," is the name of the release (such as ",(0,l.mdx)("inlineCode",{parentName:"p"},"v0.2.0"),") and ",(0,l.mdx)("inlineCode",{parentName:"p"},"PATTERN")," is used\nto match the platform that matches the artifact's name (such as ",(0,l.mdx)("inlineCode",{parentName:"p"},"'*windows*'"),")\nlike so:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-shell"},"gh release download --repo facebook/dotslash v0.2.0 --pattern '*windows*'\n")))}u.isMDXComponent=!0}}]);