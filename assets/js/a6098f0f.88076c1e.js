"use strict";(self.webpackChunkdotslash_website=self.webpackChunkdotslash_website||[]).push([[383],{3905:(e,t,a)=>{a.r(t),a.d(t,{MDXContext:()=>o,MDXProvider:()=>u,mdx:()=>f,useMDXComponents:()=>p,withMDXComponents:()=>s});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},l.apply(this,arguments)}function d(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?d(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):d(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function m(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),s=function(e){return function(t){var a=p(t.components);return n.createElement(e,l({},t,{components:a}))}},p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},x=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,o=m(e,["components","mdxType","originalType","parentName"]),s=p(a),u=r,c=s["".concat(d,".").concat(u)]||s[u]||h[u]||l;return a?n.createElement(c,i(i({ref:t},o),{},{components:a})):n.createElement(c,i({ref:t},o))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,d=new Array(l);d[0]=x;var i={};for(var m in t)hasOwnProperty.call(t,m)&&(i[m]=t[m]);i.originalType=e,i[c]="string"==typeof e?e:r,d[1]=i;for(var o=2;o<l;o++)d[o]=a[o];return n.createElement.apply(null,d)}return n.createElement.apply(null,a)}x.displayName="MDXCreateElement"},52643:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>d,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>o});var n=a(87462),r=(a(67294),a(3905));const l={sidebar_position:14},d="Command Line Flags",i={unversionedId:"flags",id:"flags",title:"Command Line Flags",description:"Because the usage of DotSlash is:",source:"@site/docs/flags.md",sourceDirName:".",slug:"/flags",permalink:"/docs/flags",draft:!1,editUrl:"https://github.com/facebook/dotslash/tree/main/website/docs/flags.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14},sidebar:"tutorialSidebar",previous:{title:"DotSlash File Schema",permalink:"/docs/dotslash-file"},next:{title:"Generating DotSlash files Using GitHub Actions",permalink:"/docs/github"}},m={},o=[{value:"Supported Flags",id:"supported-flags",level:2},{value:"Experimental Commands",id:"experimental-commands",level:2},{value:"Environment Variables",id:"environment-variables",level:2}],s={toc:o},p="wrapper";function u(e){let{components:t,...a}=e;return(0,r.mdx)(p,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"command-line-flags"},"Command Line Flags"),(0,r.mdx)("p",null,"Because the usage of DotSlash is:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-shell"},"dotslash DOTSLASH_FILE [OPTIONS]\n")),(0,r.mdx)("p",null,"where ",(0,r.mdx)("inlineCode",{parentName:"p"},"[OPTIONS]")," is forwarded to the executable represented by ",(0,r.mdx)("inlineCode",{parentName:"p"},"DOTSLASH_FILE"),",\nDotSlash's own command line flags must be able to be disambiguated from\n",(0,r.mdx)("inlineCode",{parentName:"p"},"DOTSLASH_FILE"),". In practice, that means any flag recognized by DotSlash is an\nunsupported DotSlash file name. For this reason, the set of supported flags is\nfairly limited."),(0,r.mdx)("h2",{id:"supported-flags"},"Supported Flags"),(0,r.mdx)("table",null,(0,r.mdx)("thead",{parentName:"table"},(0,r.mdx)("tr",{parentName:"thead"},(0,r.mdx)("th",{parentName:"tr",align:null},"flag"),(0,r.mdx)("th",{parentName:"tr",align:null},"description"))),(0,r.mdx)("tbody",{parentName:"table"},(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"--help")),(0,r.mdx)("td",{parentName:"tr",align:null},"prints basic usage info, as well as the ",(0,r.mdx)("em",{parentName:"td"},"platform")," it was compiled for (which is the entry it will use from the ",(0,r.mdx)("inlineCode",{parentName:"td"},'"platforms"')," map in a DotSlash file)")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("nobr",null,(0,r.mdx)("inlineCode",{parentName:"td"},"--version"))),(0,r.mdx)("td",{parentName:"tr",align:null},"prints the DotSlash version number and exits")))),(0,r.mdx)("h2",{id:"experimental-commands"},"Experimental Commands"),(0,r.mdx)("p",null,'Experimental commands are special flags that we are not committed to supporting,\nand whose output format should be considered unstable. These commands are\n"hidden" behind ',(0,r.mdx)("inlineCode",{parentName:"p"},"--")," (using ",(0,r.mdx)("inlineCode",{parentName:"p"},"--")," as the first argument to ",(0,r.mdx)("inlineCode",{parentName:"p"},"dotslash")," tells it to\nuse a special argument parser) and are used like so:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-shell"},"$ dotslash -- cache-dir\n/Users/mbolin/Library/Caches/dotslash\n")),(0,r.mdx)("table",null,(0,r.mdx)("thead",{parentName:"table"},(0,r.mdx)("tr",{parentName:"thead"},(0,r.mdx)("th",{parentName:"tr",align:null},"command"),(0,r.mdx)("th",{parentName:"tr",align:null},"description"))),(0,r.mdx)("tbody",{parentName:"table"},(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"b3sum FILE")),(0,r.mdx)("td",{parentName:"tr",align:null},"prints the BLAKE3 hash of ",(0,r.mdx)("inlineCode",{parentName:"td"},"FILE"))),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"cache-dir")),(0,r.mdx)("td",{parentName:"tr",align:null},"prints the absolute path to the user's DotSlash cache and exits")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"create-url-entry URL")),(0,r.mdx)("td",{parentName:"tr",align:null},"generates the DotSlash JSON snippet for the artifact at the URL")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"fetch DOTSLASH_FILE")),(0,r.mdx)("td",{parentName:"tr",align:null},"fetches the artifact identified by ",(0,r.mdx)("inlineCode",{parentName:"td"},"DOTSLASH_FILE")," if it is not already in the cache")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"parse DOTSLASH_FILE")),(0,r.mdx)("td",{parentName:"tr",align:null},"parses ",(0,r.mdx)("inlineCode",{parentName:"td"},"DOTSLASH_FILE")," and prints the data as pure JSON to stdout")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"sha256 FILE")),(0,r.mdx)("td",{parentName:"tr",align:null},"prints the SHA-256 hash of ",(0,r.mdx)("inlineCode",{parentName:"td"},"FILE"))))),(0,r.mdx)("h2",{id:"environment-variables"},"Environment Variables"),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"DOTSLASH_CACHE")," environment variable can be used to override the default\nlocation of the DotSlash cache. By default, the DotSlash cache resides at:"),(0,r.mdx)("table",null,(0,r.mdx)("thead",{parentName:"table"},(0,r.mdx)("tr",{parentName:"thead"},(0,r.mdx)("th",{parentName:"tr",align:null},"platform"),(0,r.mdx)("th",{parentName:"tr",align:null},"path"))),(0,r.mdx)("tbody",{parentName:"table"},(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"Linux"),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"$XDG_CACHE_HOME/dotslash")," or `$HOME/.cache/dotslash")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"macOS"),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"$HOME/Library/Caches/dotslash"))),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"Windows"),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"{FOLDERID_LocalAppData}/dotslash"))))),(0,r.mdx)("p",null,"DotSlash relies on\n",(0,r.mdx)("a",{parentName:"p",href:"https://docs.rs/dirs/5.0.1/dirs/fn.cache_dir.html"},(0,r.mdx)("inlineCode",{parentName:"a"},"dirs::cache_dir()"))," to use\nthe appropriate default directory on each platform."))}u.isMDXComponent=!0}}]);