"use strict";(self.webpackChunkdotslash_website=self.webpackChunkdotslash_website||[]).push([[275],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>d,MDXProvider:()=>p,mdx:()=>f,useMDXComponents:()=>m,withMDXComponents:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},o.apply(this,arguments)}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),h=function(e){return function(t){var n=m(t.components);return a.createElement(e,o({},t,{components:n}))}},m=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(d.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},x=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,r=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),h=m(n),p=i,c=h["".concat(r,".").concat(p)]||h[p]||u[p]||o;return n?a.createElement(c,s(s({ref:t},d),{},{components:n})):a.createElement(c,s({ref:t},d))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=x;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:i,r[1]=s;for(var d=2;d<o;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}x.displayName="MDXCreateElement"},14649:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var a=n(87462),i=(n(67294),n(3905));const o={sidebar_position:28},r="DotSlash on Windows",s={unversionedId:"windows",id:"windows",title:"DotSlash on Windows",description:"DotSlash itself works great on Windows, but comes with some caveats due to",source:"@site/docs/windows.md",sourceDirName:".",slug:"/windows",permalink:"/docs/windows",draft:!1,editUrl:"https://github.com/facebook/dotslash/tree/main/website/docs/windows.md",tags:[],version:"current",sidebarPosition:28,frontMatter:{sidebar_position:28},sidebar:"tutorialSidebar",previous:{title:"Limitations",permalink:"/docs/limitations"}},l={},d=[{value:"Shebangs",id:"shebangs",level:2},{value:"Explicit Interpreter",id:"explicit-interpreter",level:3},{value:"Sibling Batch Script",id:"sibling-batch-script",level:3},{value:"DotSlash Windows Shim",id:"dotslash-windows-shim",level:3},{value:"<code>MAX_PATH</code> limits",id:"max_path-limits",level:2},{value:"<code>argv[0]</code>",id:"argv0",level:2},{value:"Long-lived <code>dotslash.exe</code> processes",id:"long-lived-dotslashexe-processes",level:2},{value:"UNC and Cygwin paths",id:"unc-and-cygwin-paths",level:2}],h={toc:d},m="wrapper";function p(e){let{components:t,...n}=e;return(0,i.mdx)(m,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"dotslash-on-windows"},"DotSlash on Windows"),(0,i.mdx)("p",null,"DotSlash itself works great on Windows, but comes with some caveats due to\ninherent Windows behaviors that might surprise Unix users."),(0,i.mdx)("h2",{id:"shebangs"},"Shebangs"),(0,i.mdx)("p",null,"Typically on Unix, DotSlash files are run by calling them directly. This relies\non them having an exec bit (i.e. ",(0,i.mdx)("inlineCode",{parentName:"p"},"chmod +x"),") and letting the operating system\ndelegate to ",(0,i.mdx)("inlineCode",{parentName:"p"},"dotslash")," through the file's\n",(0,i.mdx)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Shebang_(Unix)"},"shebang"),"\n(i.e.",(0,i.mdx)("inlineCode",{parentName:"p"},"#!/usr/bin/env dotslash"),"). On Windows, this doesn't work because Windows\ndoes not use shebangs, and it relies on the file extension to determine\nexecutability."),(0,i.mdx)("p",null,"There are different ways of dealing with this limitation."),(0,i.mdx)("h3",{id:"explicit-interpreter"},"Explicit Interpreter"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"dotslash")," interpreter can be called directly with the DotSlash file as the\nfirst argument:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"C:\\> dotslash path\\to\\dotslash_file\n")),(0,i.mdx)("p",null,"This method works on both Windows and Unix. The drawback (besides being verbose)\nis that if the DotSlash file switches to being anything other than a DotSlash\nfile, then references will have to updated."),(0,i.mdx)("h3",{id:"sibling-batch-script"},"Sibling Batch Script"),(0,i.mdx)("p",null,"Create a file with the same name as the DotSlash file, but with an additional\n",(0,i.mdx)("inlineCode",{parentName:"p"},".bat")," (or ",(0,i.mdx)("inlineCode",{parentName:"p"},".cmd"),") extension in the same directory as the DotSlash file. Here is\nan example ",(0,i.mdx)("inlineCode",{parentName:"p"},"node.bat")," file that would accompany the ",(0,i.mdx)("inlineCode",{parentName:"p"},"node")," DotSlash file:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},'@dotslash.exe "%~dpn0" %*\n')),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"The ",(0,i.mdx)("inlineCode",{parentName:"li"},"@")," suppresses echoing the command."),(0,i.mdx)("li",{parentName:"ul"},"The ",(0,i.mdx)("inlineCode",{parentName:"li"},'"%~dpn0"')," expression corresponds to the ",(0,i.mdx)("inlineCode",{parentName:"li"},"node")," DotSlash file.",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"cmd.exe")," expands ",(0,i.mdx)("inlineCode",{parentName:"li"},"%~dpn0")," to the script's ",(0,i.mdx)("em",{parentName:"li"},"Drive")," with the ",(0,i.mdx)("em",{parentName:"li"},"Path")," that\ncontains it plus the file ",(0,i.mdx)("em",{parentName:"li"},"Name")," (get it? ",(0,i.mdx)("inlineCode",{parentName:"li"},"D")," ",(0,i.mdx)("inlineCode",{parentName:"li"},"P")," ",(0,i.mdx)("inlineCode",{parentName:"li"},"N"),", see\n",(0,i.mdx)("a",{parentName:"li",href:"https://stackoverflow.com/a/5034119"},"https://stackoverflow.com/a/5034119"),")."))),(0,i.mdx)("li",{parentName:"ul"},"The ",(0,i.mdx)("inlineCode",{parentName:"li"},"%*")," forwards the arguments passed to the batch script.")),(0,i.mdx)("p",null,"With this method you have two files:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},'C:\\> type path\\to\\node\n#!/usr/bin/env dotslash\n{\n  "name": "node-v18.16.0",\n  "platforms": {\n<<< snip >>>\n\nC:\\> type path\\to\\node.bat\n@dotslash.exe "%~dpn0" %*\n')),(0,i.mdx)("p",null,"The drawbacks with this method are all the same ones associated with batch\nscripts and batch script resolution. The nuances of this are outside the scope\nof this documentation."),(0,i.mdx)("h3",{id:"dotslash-windows-shim"},"DotSlash Windows Shim"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"This is the preferred method.")," The ",(0,i.mdx)("em",{parentName:"p"},"DotSlash Windows Shim")," is a tiny ",(0,i.mdx)("inlineCode",{parentName:"p"},".exe"),"\nexecutable that is placed next to the DotSlash file that performs the same\nfunction as the ",(0,i.mdx)("a",{parentName:"p",href:"#sibling-batch-script"},"batch script")," above, but is a native\nexecutable rather than a batch script. This is the ",(0,i.mdx)("em",{parentName:"p"},"ideal")," method that allows\nfor easy execution without any of the drawbacks of batch scripts. But this\nmethod requires compiling a small executable and keeping it next to the DotSlash\nfile."),(0,i.mdx)("p",null,"The ",(0,i.mdx)("em",{parentName:"p"},"DotSlash Windows Shim")," is available under the\n",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/facebook/dotslash/tree/main/windows_shim"},(0,i.mdx)("inlineCode",{parentName:"a"},"windows_shim")),"\nfolder in the\n",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/facebook/dotslash"},"DotSlash GitHub repository"),"."),(0,i.mdx)("h2",{id:"max_path-limits"},(0,i.mdx)("inlineCode",{parentName:"h2"},"MAX_PATH")," limits"),(0,i.mdx)("p",null,"DotSlash stores fetched artifacts in a cache directory and they're executed from\nthere. DotSlash tries hard to keep the cache directory path as short as\npossible, but in rare cases this might not be enough."),(0,i.mdx)("p",null,"Keeping with the ",(0,i.mdx)("inlineCode",{parentName:"p"},"node")," example from above, for the common case, the cache\nlocation of ",(0,i.mdx)("inlineCode",{parentName:"p"},"node.exe")," would follow a pattern like:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"C:\\Users\\[USERNAME]\\AppData\\Local\\dotslash\\[SHARD]\\[HASH]\\bin\\node.exe\n")),(0,i.mdx)("p",null,"Where ",(0,i.mdx)("inlineCode",{parentName:"p"},"[SHARD]")," is two characters and ",(0,i.mdx)("inlineCode",{parentName:"p"},"[HASH]")," is 38 characters."),(0,i.mdx)("p",null,"Again, for the common case, where you also have an 8 character username, the\n",(0,i.mdx)("inlineCode",{parentName:"p"},"node.exe")," path length is roughly 99 characters. In this case, this is below the\ntypical 260 character\n",(0,i.mdx)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation"},(0,i.mdx)("inlineCode",{parentName:"a"},"MAX_PATH")),"\nlimit. However, it's possible for something like a ",(0,i.mdx)("inlineCode",{parentName:"p"},"node_modules")," directory to\nreach much larger depths, in which case, the underlying tool must be aware and\nbe able to handle this."),(0,i.mdx)("p",null,"A possible workaround is to set the ",(0,i.mdx)("inlineCode",{parentName:"p"},"DOTSLASH_CACHE")," environment variable to a\nshallower directory."),(0,i.mdx)("h2",{id:"argv0"},(0,i.mdx)("inlineCode",{parentName:"h2"},"argv[0]")),(0,i.mdx)("p",null,"On Unix, ",(0,i.mdx)("inlineCode",{parentName:"p"},"argv[0]")," is set to the DotSlash file path. On Windows that's not\npossible, so ",(0,i.mdx)("inlineCode",{parentName:"p"},"argv[0]")," is the executable in the cache directory."),(0,i.mdx)("h2",{id:"long-lived-dotslashexe-processes"},"Long-lived ",(0,i.mdx)("inlineCode",{parentName:"h2"},"dotslash.exe")," processes"),(0,i.mdx)("p",null,"On Unix, DotSlash uses ",(0,i.mdx)("a",{parentName:"p",href:"https://linux.die.net/man/3/execv"},(0,i.mdx)("inlineCode",{parentName:"a"},"execv"))," to replace\nthe ",(0,i.mdx)("inlineCode",{parentName:"p"},"dotslash")," process with the underlying tool being delegated to from the\ncache. On Windows there's no equivalent API, so DotSlash executes the tool but\nwaits for it to exit before exiting itself. This means that while a tool is\nrunning, there will also be a ",(0,i.mdx)("inlineCode",{parentName:"p"},"dotslash.exe")," running. The overhead is minimal\nbut this presents a challenge when trying to update DotSlash itself."),(0,i.mdx)("p",null,"On Windows, you can't remove a program that is running. So to update\n",(0,i.mdx)("inlineCode",{parentName:"p"},"dotslash.exe")," you have to terminate all existing ",(0,i.mdx)("inlineCode",{parentName:"p"},"dotslash.exe")," processes. This\ncan often be done by running ",(0,i.mdx)("inlineCode",{parentName:"p"},"taskkill /f /im dotslash.exe"),"."),(0,i.mdx)("h2",{id:"unc-and-cygwin-paths"},"UNC and Cygwin paths"),(0,i.mdx)("p",null,"DotSlash itself is\n",(0,i.mdx)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/standard/io/file-path-formats#unc-paths"},"UNC path"),"\naware but the underlying tool might not be. DotSlash tries hard to avoid UNC\npaths to ensure maximum compatibility."),(0,i.mdx)("p",null,"DotSlash is not\n",(0,i.mdx)("a",{parentName:"p",href:"https://cygwin.com/cygwin-ug-net/using.html#cygdrive"},"Cygwin path")," aware.\nNormally translation of a Cygwin path to a Windows path (i.e.\n",(0,i.mdx)("inlineCode",{parentName:"p"},"/cygdrive/c/path/to/file")," to ",(0,i.mdx)("inlineCode",{parentName:"p"},"C:\\path\\to\\file"),") is handled by the Cygwin shell\nexecuting DotSlash. But through layers of indirection it's possible to lose\nthis. In this case, DotSlash does not attempt to convert the path at all."))}p.isMDXComponent=!0}}]);